name: Deploy to EC2

on:
  workflow_dispatch:

jobs:
  deploy:
    name: 'Deploy to EC2'
    runs-on: ubuntu-latest
    environment: production
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash  
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Get EC2 name 
      - name: Get EC2 Instance name
        run: |
          INSTANCE_NAME="$(terraform-bin output -raw instance_name)"
          echo "Instance name: $INSTANCE_NAME" 
          echo "instance_name=$INSTANCE_NAME" >> $GITHUB_OUTPUT
        id: flag_output
      
      - name: Update version from tf_vending_machine_management1 to tf_vending_machine_management2
        if: steps.flag_output.outputs.instance_name == 'tf_vending_machine_management1'
        run: |
          echo "Current ec2 instance: ${{ steps.flag_output.outputs.instance_name }}"
          echo "Update version from tf_vending_machine_management1 to tf_vending_machine_management2"
          cd terraform/sys1tosys2_create_ec2
          terraform init
          terraform apply -auto-approve
          cd ../sys1tosys2_remove_attach
          terraform init
          terraform apply -auto-approve
          cd ../system2
          terraform init
          terraform apply -auto-approve
          echo "Updated successfully version from tf_vending_machine_management1 to tf_vending_machine_management2"
      
      - name: Update version from tf_vending_machine_management2 to tf_vending_machine_management1
        if: steps.flag_output.outputs.instance_name == 'tf_vending_machine_management2'
        run: |
          echo "Current ec2 instance: ${{ steps.flag_output.outputs.instance_name }}"
          echo "Update version from tf_vending_machine_management2 to tf_vending_machine_management1"
          cd terraform/sys2tosys1_create_ec2
          terraform init
          terraform apply -auto-approve
          cd terraform/sys2tosys1_remove_attach
          terraform init
          terraform apply -auto-approve
          cd ../system1
          terraform init
          terraform apply -auto-approve
          echo "Updated successfully version from tf_vending_machine_management2 to tf_vending_machine_management1"